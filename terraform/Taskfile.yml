# https://taskfile.dev

version: '3'
dotenv: ['.env']
output: prefixed
silent: true

env:
  ENVIRONMENT: sandbox

vars:
  GREETING: Terraform Taskfile!
  PROJECT: XYZ
  STACK: network
  GIT_PROFILE: xyz-shared
  AWS_PROFILE: xyz-test
  AWS_ACCOUNT: 1234567890
  AWS_REGION: eu-west-1

tasks:

  default:
    desc: Terraform Taskfile!
    cmds:
      - echo "{{.GREETING}}"
      - task -l

  test:
    desc: Test workflow.
    prefix: test
    cmds:
      - task: fmt
      - task: validate
      - task: tflint
      - task: tfsec
      - task: tfcheck

  clean:
    desc: Terraform clean.
    cmds:
      - rm -rf {{.STACK}}/.terraform/
      - rm -f {{.STACK}}/.terraform.lock.hcl


  init:
    desc: Terraform init.
    cmds:
      - terraform -chdir={{.STACK}} init

  
  upgrade:
    desc: Terraform upgrade.
    cmds:
      - terraform -chdir={{.STACK}} init -upgrade=true


  validate:
    desc: Terraform validate.
    deps:
      - task: init
    cmds:
      - terraform -chdir={{.STACK}} validate


  fmt:
    desc: Terraform fmt.
    cmds:
      - terraform -chdir={{.STACK}} fmt -check -diff


  plan:
    desc: Terraform plan.
    deps:
      - task: init
    cmds:
      - terraform -chdir={{.STACK}} plan -compact-warnings


  apply:
    desc: Terraform apply.
    deps:
      - task: init
    cmds:
      - terraform -chdir={{.STACK}} apply -auto-approve -compact-warnings

  
  output:
    desc: Terraform output.
    deps:
      - task: init
    cmds:
      - terraform -chdir={{.STACK}} output


  cost:
    desc: infracost - Generate cost estimates from Terraform
    deps:
      - task: init
    cmds:
      - infracost --tfdir {{.STACK}} --show-skipped


  tflint:
    desc: tflint - A Pluggable Terraform Linter
    dir: $STACK
    cmds:
      - tflint --config=../.tflint.hcl --var-file=terraform.tfvars .


  tfsec:
    desc: tfsec - a simple tool to detect potential security vulnerabilities in your terraformed infrastructure.
    dir: $STACK
    cmds:
      - tfsec . --soft-fail --config-file ../.tfsec.yml --tfvars-file terraform.tfvars  --custom-check-dir ../.tfsec --concise-output

  
  tfcheck:
    desc: checkov - Prevent cloud misconfigurations during build-time for IaC tools
    dir: $STACK
    cmds:
      - checkov --framework terraform --soft-fail --directory .


  drift:
    desc: driftctl - Detect, track and alert on infrastructure drift.
    cmds:
      - | 
        driftctl scan \
        --from tfstate+s3://{{.ACCOUNT_ID}}-{{.REGION}}-tf-state/state/dev-app.tfstate \
        --from tfstate+s3://{{.ACCOUNT_ID}}-{{.REGION}}-tf-state/state/dev-data.tfstate \
        --from tfstate+s3://{{.ACCOUNT_ID}}-{{.REGION}}-tf-state/state/dev-network.tfstate


  tfdoc:
    desc: terraform-docs - A utility to generate documentation from Terraform modules in various output formats
    dir: $STACK
    cmds:
      - terraform-docs markdown . --config ../.terraform-docs.yml --sort-by-required | pbcopy

  tfenv:
    desc: tfenv 
    cmds:
      - tfenv use


  inframap:
    desc: inframap 
    cmds:
      - inframap generate --hcl .


  print:
    cmds:
      - echo "{{.ENV}}"
      - echo "{{.STACK}}"
